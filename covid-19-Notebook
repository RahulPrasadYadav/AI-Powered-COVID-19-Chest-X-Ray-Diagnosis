{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3324348,"sourceType":"datasetVersion","datasetId":576013}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/helooohy/covid-19-radiography-detection?scriptVersionId=250281902\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"import os \nimport cv2 \nfrom tqdm import tqdm","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-13T15:14:19.245735Z","iopub.execute_input":"2025-07-13T15:14:19.246194Z","iopub.status.idle":"2025-07-13T15:14:19.496867Z","shell.execute_reply.started":"2025-07-13T15:14:19.246157Z","shell.execute_reply":"2025-07-13T15:14:19.495983Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Data Handling\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import confusion_matrix, classification_report\n\n# Visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom tensorflow import keras\n# TensorFlow / Keras\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import (\n    Conv2D, MaxPooling2D, Activation, Dropout, BatchNormalization, \n    Flatten, Dense\n)\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.utils import to_categorical\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-13T15:14:19.534863Z","iopub.execute_input":"2025-07-13T15:14:19.535207Z","iopub.status.idle":"2025-07-13T15:14:39.988495Z","shell.execute_reply.started":"2025-07-13T15:14:19.535183Z","shell.execute_reply":"2025-07-13T15:14:39.987256Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n\nimagePaths = []\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    if 'images' in dirname:\n        for filename in filenames:\n            if filename.endswith('png'):\n                imagePaths.append(os.path.join(dirname, filename))\n   \n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-07-13T15:14:39.990453Z","iopub.execute_input":"2025-07-13T15:14:39.991015Z","iopub.status.idle":"2025-07-13T15:15:38.535058Z","shell.execute_reply.started":"2025-07-13T15:14:39.990989Z","shell.execute_reply":"2025-07-13T15:15:38.533981Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Data - Label\nData = []\nTarget = []\nresize = 150\n\n# Label mapping dictionary\ncat = {'Viral Pneumonia': 'Pneumonia', 'Normal': 'Normal', 'COVID': 'Covid-19'}\n\n# Iterate through the image paths and assign the labels\nfor imagePath in tqdm(imagePaths):\n    label = imagePath.split(os.path.sep)[-3]  # Extract the label from parent folder (2 levels up from image)\n    \n    if label not in cat:\n        continue  # Skip this image if label is not found in dictionary\n    \n    image = cv2.imread(imagePath)\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    image = cv2.resize(image, (resize, resize)) / 255.0  # Normalize image pixels to [0, 1]\n\n    Data.append(image)\n    Target.append(cat[label])\n\nprint(f\"Processed {len(Data)} images with corresponding labels.\")\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-13T15:15:38.536101Z","iopub.execute_input":"2025-07-13T15:15:38.53642Z","iopub.status.idle":"2025-07-13T15:18:09.594363Z","shell.execute_reply.started":"2025-07-13T15:15:38.53639Z","shell.execute_reply":"2025-07-13T15:18:09.593283Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(len(Data))\n\nprint(len(Target))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-13T15:18:09.595356Z","iopub.execute_input":"2025-07-13T15:18:09.595637Z","iopub.status.idle":"2025-07-13T15:18:09.601076Z","shell.execute_reply.started":"2025-07-13T15:18:09.595614Z","shell.execute_reply":"2025-07-13T15:18:09.599964Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Lebal Encoding ","metadata":{}},{"cell_type":"code","source":"le=LabelEncoder()\nlabels=le.fit_transform(Target)\nlabels=to_categorical(labels)\n\nprint(le.classes_)\n\nprint(labels[0])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-13T15:18:09.603331Z","iopub.execute_input":"2025-07-13T15:18:09.604141Z","iopub.status.idle":"2025-07-13T15:18:09.62868Z","shell.execute_reply.started":"2025-07-13T15:18:09.604102Z","shell.execute_reply":"2025-07-13T15:18:09.627627Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Initial split\n(x_train, x_test, y_train, y_test) = train_test_split(Data, labels, test_size=0.20, stratify=labels, random_state=42)\n\n# Further split the training data into training and validation sets\n(x_train, x_val, y_train, y_val) = train_test_split(x_train, y_train, test_size=0.20, stratify=y_train, random_state=42)\n\n\ntrainX = np.array(x_train)\nvalX = np.array(x_val)\ntestX = np.array(x_test)\ntrainY = np.array(y_train)\nvalY = np.array(y_val)\ntestY = np.array(y_test)\n\nprint(\"Training data shape:\", trainX.shape)\nprint(\"Validation data shape:\", valX.shape)\nprint(\"Testing data shape:\", testX.shape)\nprint(\"Training labels shape:\", trainY.shape)\nprint(\"Validation labels shape:\", valY.shape)\nprint(\"Testing labels shape:\", testY.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-13T15:18:09.629841Z","iopub.execute_input":"2025-07-13T15:18:09.630872Z","iopub.status.idle":"2025-07-13T15:18:12.947083Z","shell.execute_reply.started":"2025-07-13T15:18:09.630842Z","shell.execute_reply":"2025-07-13T15:18:12.945981Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"s=150\n\nmodel=Sequential()\nmodel.add(Conv2D(filters=32, kernel_size=(3, 3), activation=\"relu\", input_shape=(s, s, 3), kernel_initializer='he_normal'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Conv2D(filters=64, kernel_size=(3, 3), activation=\"relu\"))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Conv2D(filters=128, kernel_size=(3, 3), activation=\"relu\"))\nmodel.add(MaxPooling2D(pool_size=(2, 2), strides=(1, 1)))\nmodel.add(Dropout(0.25))\n\n\n# ann = dense layers\n\n# Nueral Network (Dense Layers)\nmodel.add(Flatten())  # \nmodel.add(Dense(64, activation=\"relu\"))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(3, activation=\"softmax\"))\n\n\nmodel.compile(optimizer=keras.optimizers.Adam(),\n              loss=keras.losses.categorical_crossentropy,\n              metrics=['accuracy'])\n\n\n\nepochs = 25\nhistory = model.fit(trainX, trainY, epochs=epochs, batch_size=40, verbose=1, validation_data=(valX, valY))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-13T15:18:12.948063Z","iopub.execute_input":"2025-07-13T15:18:12.948367Z","iopub.status.idle":"2025-07-13T17:19:49.755586Z","shell.execute_reply.started":"2025-07-13T15:18:12.948346Z","shell.execute_reply":"2025-07-13T17:19:49.753996Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"history.history","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-13T17:20:34.036553Z","iopub.execute_input":"2025-07-13T17:20:34.037057Z","iopub.status.idle":"2025-07-13T17:20:34.048479Z","shell.execute_reply.started":"2025-07-13T17:20:34.037029Z","shell.execute_reply":"2025-07-13T17:20:34.047346Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plt.figure(figsize=(12, 6))\n# plt.subplot(1,2,1)\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Model Acurracy')\nplt.xlabel(\"Epoch\")\nplt.ylabel('Accuracy')\nplt.legend(['Train', 'Validation'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-13T17:23:41.944581Z","iopub.execute_input":"2025-07-13T17:23:41.94496Z","iopub.status.idle":"2025-07-13T17:23:42.269101Z","shell.execute_reply.started":"2025-07-13T17:23:41.944935Z","shell.execute_reply":"2025-07-13T17:23:42.267966Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plt.figure(figsize=(12, 6))\n# plt.subplot(1,2,1)\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Model loss')\nplt.xlabel(\"Epoch\")\nplt.ylabel('loss')\nplt.legend(['Train', 'Validation'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-13T17:24:53.953797Z","iopub.execute_input":"2025-07-13T17:24:53.954192Z","iopub.status.idle":"2025-07-13T17:24:54.252757Z","shell.execute_reply.started":"2025-07-13T17:24:53.954165Z","shell.execute_reply":"2025-07-13T17:24:54.251726Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"prediction=model.predict(testX)\n\ny_pred=np.argmax(prediction, axis=1)\n\ny_true=np.argmax(testY, axis=1)\n\ncm=confusion_matrix(y_true, y_pred)\n\n\nprint(cm)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-13T17:29:33.642319Z","iopub.execute_input":"2025-07-13T17:29:33.643005Z","iopub.status.idle":"2025-07-13T17:29:58.265387Z","shell.execute_reply.started":"2025-07-13T17:29:33.642971Z","shell.execute_reply":"2025-07-13T17:29:58.264411Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"class_names = le.classes_","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-13T17:33:28.694472Z","iopub.execute_input":"2025-07-13T17:33:28.69484Z","iopub.status.idle":"2025-07-13T17:33:28.700424Z","shell.execute_reply.started":"2025-07-13T17:33:28.694813Z","shell.execute_reply":"2025-07-13T17:33:28.699306Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"confusion_Matrix=pd.DataFrame(cm, index=class_names, columns=class_names)\n\nplt.figure(figsize=(8,6))\nsns.heatmap(confusion_Matrix, annot=True, fmt='d', cmap='Blues', cbar=False)\nplt.xlabel('Predicted')\nplt.ylabel('True')\nplt.title('Confusion Matrix')\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-13T17:33:45.007064Z","iopub.execute_input":"2025-07-13T17:33:45.007449Z","iopub.status.idle":"2025-07-13T17:33:45.164832Z","shell.execute_reply.started":"2025-07-13T17:33:45.007424Z","shell.execute_reply":"2025-07-13T17:33:45.163591Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(classification_report(y_true, y_pred, target_names=le.classes_, digits = 5))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-13T17:34:07.766375Z","iopub.execute_input":"2025-07-13T17:34:07.766755Z","iopub.status.idle":"2025-07-13T17:34:07.78983Z","shell.execute_reply.started":"2025-07-13T17:34:07.766731Z","shell.execute_reply":"2025-07-13T17:34:07.788625Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"model.save('CNN_Covid19_Xray_Version.h5') \n\n\nimport pickle\n\npickle.dump(le, open(\"Label_encoder.pkl\",'wb'))\nprint(\"saved\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-13T17:34:32.516303Z","iopub.execute_input":"2025-07-13T17:34:32.516684Z","iopub.status.idle":"2025-07-13T17:34:32.81168Z","shell.execute_reply.started":"2025-07-13T17:34:32.516657Z","shell.execute_reply":"2025-07-13T17:34:32.810402Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from tensorflow.keras.models import load_model","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-13T18:09:33.722084Z","iopub.execute_input":"2025-07-13T18:09:33.722459Z","iopub.status.idle":"2025-07-13T18:09:33.727715Z","shell.execute_reply.started":"2025-07-13T18:09:33.722435Z","shell.execute_reply":"2025-07-13T18:09:33.72648Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"model=load_model('CNN_Covid19_Xray_Version.h5')\nle=pickle.load(open('Label_encoder.pkl', 'rb'))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-13T18:10:40.270343Z","iopub.execute_input":"2025-07-13T18:10:40.270703Z","iopub.status.idle":"2025-07-13T18:10:40.713266Z","shell.execute_reply.started":"2025-07-13T18:10:40.270678Z","shell.execute_reply":"2025-07-13T18:10:40.712155Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Real time Detection ","metadata":{}},{"cell_type":"code","source":"def detection_system(image_path, model, label_encoder, image_size=150):\n    \"\"\"\n    Detection system function to classify an input image.\n\n    Parameters:\n    - image_path: The path to the image to classify.\n    - model: The trained Keras model.\n    - label_encoder: The LabelEncoder used to encode the labels.\n    - image_size: The target size for resizing the image (default: 150x150).\n    \n    Returns:\n    - predicted_label: The predicted class label.\n    - confidence_score: The confidence score of the predicted class.\n    \"\"\"\n    # Load the image from the provided path\n    image = cv2.imread(image_path)\n    \n    if image is None:\n        raise ValueError(f\"Image not found at path: {image_path}\")\n    \n    # Convert image from BGR to RGB format\n    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    \n    # Resize the image to the same size as the training images\n    image_resized = cv2.resize(image_rgb, (image_size, image_size))\n    \n    # Normalize the pixel values to the range [0, 1]\n    image_normalized = image_resized / 255.0\n    \n    # Expand the dimensions to match the input shape for the model\n    image_input = np.expand_dims(image_normalized, axis=0)\n    \n    # Predict the class of the image\n    predictions = model.predict(image_input)\n    \n    # Get the predicted class index and confidence score\n    predicted_index = np.argmax(predictions)\n    confidence_score = predictions[0][predicted_index]\n    \n    # Decode the predicted index back to the original label\n    predicted_label = label_encoder.inverse_transform([predicted_index])[0]\n    \n    \n    # Display the image with the predicted label and confidence score\n    plt.imshow(image_resized)\n    plt.title(f\"Predicted: {predicted_label}, Confidence: {confidence_score*100:.2f}%\")\n    plt.axis('off')\n    plt.show()\n\n    return predicted_label, confidence_score\n\n# Example usage\nimage_path = \"/kaggle/input/covid19-radiography-database/COVID-19_Radiography_Dataset/COVID/images/COVID-100.png\"  # Replace with the path to your image\npredicted_label, confidence_score = detection_system(image_path, model, le)\nprint(f\"Predicted Label: {predicted_label}, Confidence Score: {confidence_score*100:.2f}%\")\n    ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-13T18:23:34.701277Z","iopub.execute_input":"2025-07-13T18:23:34.701653Z","iopub.status.idle":"2025-07-13T18:23:35.010494Z","shell.execute_reply.started":"2025-07-13T18:23:34.70163Z","shell.execute_reply":"2025-07-13T18:23:35.008963Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"image_path = \"/kaggle/input/covid19-radiography-database/COVID-19_Radiography_Dataset/Normal/images/Normal-10.png\"  # Replace with the path to your image\npredicted_label, confidence_score = detection_system(image_path, model, le)\nprint(f\"Predicted Label: {predicted_label}, Confidence Score: {confidence_score*100:.2f}%\")\n    ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-13T18:24:20.270358Z","iopub.execute_input":"2025-07-13T18:24:20.270692Z","iopub.status.idle":"2025-07-13T18:24:20.571897Z","shell.execute_reply.started":"2025-07-13T18:24:20.27067Z","shell.execute_reply":"2025-07-13T18:24:20.570871Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"image_path = \"/kaggle/input/covid19-radiography-database/COVID-19_Radiography_Dataset/Normal/images/Normal-10.png\"  # Replace with the path to your image\npredicted_label, confidence_score = detection_system(image_path, model, le)\nprint(f\"Predicted Label: {predicted_label}, Confidence Score: {confidence_score*100:.2f}%\")","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}